#!/bin/sh
# list last installed pacman packages.
# example: $ paclast -r | head

main()
{
    case "$1" in
        -r ) relative ;;
        -c ) colored ;;
        -p ) pager ;;
        *)   list ;;
    esac
}

list()
{
    # get a list of all installed packages and their first install date.
    # installed="$(awk '/installed/ {print $1" "$4}' /var/log/pacman.log | awk '!_[$2]++')"
    installed="$(awk '/installed/ {print $1" "$4}' /var/log/pacman.log | tac | sort -u -k2,2)"

    # Get a list of explicitly installed packages and format them for awk's usage
    explicit="$(
        pacman -Qqe | while IFS= read -r explicit_pkg; do
            printf '$2=="'$explicit_pkg'" || '
        done | rev | cut -c5- | rev
        )"

        echo "$installed" | awk "$explicit" | # Separate explicitly installed packages out of the list of "all installed packages and their dates".
        sort --reverse --stable --key=1,1   | # Sort by date, then beautify the list using awk.
        awk 'BEGIN{FS=OFS=""};
             {$1="";$12=" ";$18=$19=$20=$21=$22=$23=$24=$25=$26="";$27=" "; print $0}'
}

# Print how many days ago a given date is.
# The digit 1 after $given_date indicates the time 01:00:00
# I put it there because if it's omitted, date assumes the time
# to be 00:00:00, and such time might be invalid because of daylight saving.
get_days_ago() {
    given_date="$1"
    echo $(( ($(date +%s) - $(date -d "$given_date 1" +%s)) / (86400) ))
}

# Insert a relative date column in every line.
relative() {
    list |
        while read -r line; do
            pkg="$( echo "$line" | cut -d' ' -f3)"
            time="$(echo "$line" | cut -d' ' -f2)"
            date="$(echo "$line" | cut -d' ' -f1)"
            days_ago="$(get_days_ago "$date")"
            echo "$date $time ($days_ago days ago) $pkg"
        done
}

colored() {
    relative |
        while read -r line; do # Add nice colors to output.
            printf "\e[1;32m$line\n"
            read -r line
            printf "\e[1;36m$line\n"
        done

    # Revert terminal's text color back to normal.
    printf "\e[0m"
}

pager() {
    colored | less
}

main "$@"
exit 0
