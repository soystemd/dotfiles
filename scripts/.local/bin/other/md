#!/bin/sh
# compile markdown to pdf using lowdown,
# and open it with a pdf reader or save it to file.

# config
pdf_reader=zathura

main() {
    # defualt settings
    inherit=true # inherit document title from first heading
    overwrite=false # overwrite existing files while saving
    stdout=false # print to stdout instead of saving
    printgroff=false # print groff to stdout
    command -v "$pdf_reader" >/dev/null &&
        open=true # open pdf with pdf reader.

    while true; do case "$1" in
        -s) open=false; shift ;;
        -o) open=false; overwrite=true; shift ;;
        -p) stdout=true; shift ;;
        -g) stdout=true; printgroff=true; shift ;;
        -n) inherit=false; shift ;;
        -t) title="$2"; shift 2 ;;
        --) shift; break ;;
        -*) print_usage_exit; shift ;;
        *) break ;;
    esac; done

    [ -z "$*" ] && print_usage_exit

    for doc; do
        compile "$doc"
    done
}

compile() {
    in="$1"
    [ ! -r "$in" ] &&
        echo file "'$in'" doesn\'t exist or is unreadable. >&2 &&
        return 1

    base="$(basename "$in")"
    out="${base%.*}.pdf"
    dir="$(dirname "$in")"
    out="$dir/$out"

    if [ "$stdout" = true ]; then
        md_to_pdf "$in"
    elif [ "$open" = true ]; then
        open
    else
        save
    fi
}

open() {
    p="${XDG_RUNTIME_DIR:-/tmp}/" # prefix
    mkdir -p "$(dirname "$p$out")" || exit 1
    md_to_pdf "$in" > "$p$out"
    $pdf_reader "$p$out" >/dev/null 2>&1
    rm "$p$out"
}

save() {
    if [ "$overwrite" != true ] && [ -e "$out" ]; then
        confirm file "$out" exists. overwrite? || return 1
    fi
    md_to_pdf "$in" > "$out"
}

md_to_pdf() {
    groff="$(lowdown -sTms "$1")" # convert markdown to groff
    # if title isn't already set, get it from the markdown's first heading
    if [ -z "$title" ] && [ "$inherit" = true ]; then
        first_top_heading="$(echo "$groff" | grep -m1 -A1 '^.NH 1' | tail -n1 | cut -d' ' -f2-)"
        top_heading_nr="$(echo "$groff" | grep -c '^.NH 1')" # number of top headings in document
        # proceed if first heading exists
        if [ -n "$first_top_heading" ]; then
            title="$first_top_heading"
            # if markdown is standard (only has one top heading),
            # then remove it and decrement all other headings
            if [ "$top_heading_nr" -eq 1 ]; then
                groff="$(echo "$groff" | sed '/^.NH 1/,+1 d')"
                groff="$(echo "$groff" | awk '/^.NH [2-9]/{$2-=1}1')"
            fi
        fi
    fi
    # set the title and convert groff to pdf
    groff="$(echo "$groff" | sed "s/^Untitled.*/$title/")"

    if [ "$printgroff" = true ]; then
        echo "$groff"
    else
        echo "$groff" | pdfroff -itk -mspdf 2>/dev/null
    fi
}

print_usage_exit() {
cat << 'eof'
Compile markdown to pdf and open/save it.
Usage: md [OPTION...] [--] FILE...
Options:
  -s          save pdf to file instead of opening it.
  -o          overwrite; don't ask if file already exists.
                implies -s.
  -p          print pdf to stdout; don't save or open.
  -g          print groff to stdout.
  -n          don't inherit documen's title from
                the first top-level markdown heading.
  -t <title>  set the title manually.

Ehsan Ghorbannezhad (https://github.com/soystemd)
eof
}

main "$@"
exit
