#!/bin/sh
# an improved version of luke smith's screenshot script.
# requires maim, and my 'choices' script.
# it lets you choose the kind of screenshot to take,
# including copying the image or even highlighting an area to copy.
# scrotcucks on suicidewatch right now.

# config
save_to=/media/screenshots
[ -w "$save_to" ] || save_to=~
prompt='Screenshot'

# delay between pressing enter and taking the shot.
# 0.2 seconds works pretty well.
delay=0.2

# initial mode (possible values: save, clipboard)
mode=save

main ()
{
    while true; do

        cmd="$(
            choices "$prompt" "
                mode=$mode     : toggle_mode,
                Fullscreen     : fullscreen,
                Select area    : select_area,
                Current window : current_window
            "
        )" || return 1

        case "$cmd" in
            toggle_mode) [ $mode = save ] && mode=clipboard || mode=save ;;
            *) break ;;
        esac

    done

    case "$mode" in
        save) msg='screenshot saved.' ;;
        clipboard) msg='screenshot copied to clipboard.' ;;
    esac

    sleep $delay
    make_name
    eval "${cmd}_${mode}" && notify-send -t 1000 "$msg"
}

fullscreen_save() { maim -u "${name}_full.png" ;}
select_area_save() { maim -u -s "${name}_sele.png" ;}
current_window_save() { maim -u -i "$(current_wndw)" "${name}_wndw.png" ;}
fullscreen_clipboard() { maim -u | clip ;}
select_area_clipboard() { maim -u -s | clip ;}
current_window_clipboard() { maim -u -i "$(current_wndw)" | clip ;}

make_name ()
{
    rand="$(shuf -n1 -i1000-9999)"
    date="$(date +%Y-%m-%d_%H%M%S)"
    name="$save_to/sc_${date}_${rand}"
}

clip()
{
    xclip -selection clipboard -t image/png "$@"
}

current_wndw ()
{
    xdotool getactivewindow
}

main "$@"
exit
