#!/bin/sh

# with this script, you can have dmenu show items,
# and output a specified command based on the item selected.


# Usage:
#   choices <prompt> <items> [selected-item(optional)]


# Items:
#
# the separator between each item's name and it's command
# is either a colon (:) or an arrow (->).
#
# the separator between different items is a comma (,).
#
#
# any whitespace around separators are ignored.


# Example:
#
# eval "$(
#     choices 'system actions' \
#         'shutdown system:sudo -A poweroff, reboot:sudo -A reboot' )"


# Another Example:
#
#     prompt='Say what?'
#
#     list='
#     Say Hello! -> echo hello
#     Say Bye!   -> echo bye
#     '
#
#     eval "$( choices "$prompt" "$list" )"


# config
fs='[ \\t]*:\\s*' # field separato regex (between each item's name and command)
rs='[ \\t]*,\\s*' # record separator regex (between items)

prompt="$1"
items="$2"
chosen="$3"

format () {
    awk NF | sed 's/^\s*//' | tr -d '\n'
}

awkv () {
    awk -v FS="$fs" -v RS="$rs" -v chosen="$chosen" "$@"
}

operator='=='
[ -n "$chosen" ] && operator='~' && case='-v IGNORECASE=1' || chosen="$(
    printf "$items" | format | awkv '{print $1}' | awk NF | dmenu -p "$prompt"
)"

cmd="$(
    printf "$items" | format |
        awkv $case '
            $1'"$operator"'chosen {
                if (NF>1) print $2
                else print $1
                exit
            }
        '
)"

[ -z "$cmd" ] && exit 1

echo "$cmd"
