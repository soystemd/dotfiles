# ==============
# = Settings
# ==============

set shell bash
set shellopts "-u"
set ifs "\n"
set period 1
set nopreview
set ratios 1
set dircounts
set info "size"
set scrolloff 10
set incsearch 1
set tabstop 4

set previewer lfpreviewer
set cleaner   lfcleaner

set timefmt   "2006-01-02 15:04"
set promptfmt "\033[2m%d"
set errorfmt  "\033[31m%s\033[0m"

set nohidden
set hiddenfiles ".*:$RECYCLE.BIN:System Volume Information"

# ==============
# = Commands
# ==============

# basic stuff
cmd q quit
cmd wq quit
cmd edit $$EDITOR -- $f
cmd suedit $suedit -- $f
cmd jumpback push :mark-load<enter>'
cmd open        &opener -l$id -- $f
cmd openall     &opener -l$id -- $fx
cmd openallfork &opener -fl$id -- $fx

# if it's a symlink, go to where it's pointing;
# if it's a file, open it with opener and fork it.
cmd openfork &{{
    if [ -d $f ]; then
        lfselect $id $(readlink -f $f)
    else
        opener -fl$id -- $f
    fi
}}

cmd paste ${{
    printf '\e[?1049h'
    list=~/.local/share/lf/files
    mode=$(head -n1 $list)
    srcs=$(sed 1d $list)
    tput civis
    case $mode in
        copy) cpg -ag --backup=numbered $srcs . ;;
        move) mvg  -g --backup=numbered $srcs . 2>/dev/null ;;
    esac
    e=$?
    tput cnorm
    [ $e -eq 0 ] || exit
    rm $list
    lf -remote "send $id load"
    lf -remote "send clear"
    printf '\e[?1049l'
}}

cmd mkexec &{{
    [ ! -f $f ] && exit
    if [ -x $f ]; then chmod a-x -- $f
    else chmod a+x -- $f; fi
    lfreload -f $id
}}

cmd delete ${{
    echo '  permanently deleting files:'; echo
    echo "$fx"; echo
    confirm '  delete?' && rm -rf -- $fx
}}

cmd bulkrename ${{
    for path in $fx; do
        basename "$path"
    done | vidir -
}}

# go to the next/previous parent directory
cmd parent-up   push :cmd<space>open<enter>;hkl:cmd<space>open<space>&opener<space>-l$id<space>--<space>$f<enter>
cmd parent-down push :cmd<space>open<enter>;hjl:cmd<space>open<space>&opener<space>-l$id<space>--<space>$f<enter>

# follow symlinks
cmd follow &lfselect $id $(readlink -f $f)

# console stuff
cmd editor push $$EDITOR<space>--<space>
cmd trash  push &trash-put<space>$fx;lfreload<space>$id
cmd touch  push &touch<space><space>;lfreload<space>$id<home><a-f><right>
cmd mkdir  push &<space>name=''<space>;mkdir<space>-p<space>"$name";lfreload<space>$id;lfselect<space>$id<space>"$name"<home><a-f><right><right>

# bookmarkig
cmd bookmarks ${{
    p="$(bm)" || exit
    lf -remote "send $id select '$p'"
    lf -remote "send $id open"
}}

cmd bookmark-add  push &<space>bm<space>-a<space>
cmd bookmark-rm   push &<space>bm<space>-r<space>

# get info about files
cmd mediainfo     $mediainfo $f  | less
cmd mediainfo-all $mediainfo $fx | less

cmd filetype %{{
    file=$(readlink -f $f)
    file -b --mime-type -- $file | tr -d '\n'
    printf '; '
    file -b -- $file
}}

cmd filetype-all ${{
    for file in $fx; do
        basename -- $file
        printf '    '
        file -b --mime-type -- $file
        printf '    '
        file -b -- $file
        echo
    done | less
}}

# size of files and dirs
cmd sized0  %echo " calculating..."; du -sh 2>/dev/null
cmd sized1  $du -hd1 2>/dev/null | grep -xvE '\S+\s+\.' | sort -rh | $PAGER
cmd ncdu    $ncdu

# archive stuff
cmd extract $echo '  extracting:'; echo "$fx"; aunpack -De -- $fx

cmd zstd ${{
    export ZSTD_CLEVEL=18
    export ZSTD_NBTHREADS=0
    apack -F.tar.zst -- $f.tar.zst $(realpath --relative-base=$PWD -- $fx) 2>&1 | grep -v ^Wide
}}

cmd zstd-each ${{
    export ZSTD_CLEVEL=18
    export ZSTD_NBTHREADS=0
    apack -e -F.tar.zst -- $(realpath --relative-base=$PWD -- $fx) 2>&1 | grep -v ^Wide
}}

cmd zstd-repack ${{
    export ZSTD_CLEVEL=18
    export ZSTD_NBTHREADS=0
    arepack -e -F.tar.zst -- $fx 2>&1 | grep -v ^Wide
}}

cmd zip $ apack -F.zip -- $f.zip $(realpath --relative-base=$PWD -- $fx) 2>&1
cmd zip-each $ apack -e -F.zip -- $(realpath --relative-base=$PWD -- $fx) 2>&1
cmd zip-repack $ arepack -e -F.zip -- $fx

cmd archive-mount &lfmount $id $f
cmd archive-mount-password $lfmount -p $id $f
cmd archive-unmount &lfmount -u $id

# image stuff
cmd img-rot-cw  &for img in $fx; do convert -rotate 90  $img $img; done
cmd img-rot-ccw &for img in $fx; do convert -rotate -90 $img $img; done
cmd img-autorot %jhead -autorot $fx; echo 'finished autorotating images.'
cmd gimp &gimp $fx

# other stuff
cmd toggle-preview &lftpw $id 1 1:1 off
cmd yankpath &echo -n $f | xsel -i -p -b
cmd drag &dragon-drag-and-drop -a -x $fx
cmd drag-separate &dragon-drag-and-drop $fx
cmd finder $finder -f | lfselect $id

cmd wallpaper ${{
    printf '\e[?1049h'
    wallpaper -- "$f"
    printf '\e[?1049l'
}}

# ==============
# = Bindings
# ==============

map ~  cd ~
map .  set hidden!
map K  parent-up
map J  parent-down
map H  jumpback
map U  &termopen
map L  openfork
map oa openall
map oA openallfork
map fo follow
map rn rename
map yy copy
map dd cut
map pp paste
map ua invert
map <c-a> invert
map uc unselect
map uv clear
map pf toggle-preview
map yp yankpath
map ft filetype
map fT filetype-all
map mi mediainfo
map mI mediainfo-all
map si set reverse!
map sr set reverse!
map wa wallpaper

map vi  editor
map E   edit
map svi suedit

map D  trash
map purge delete
map mk mkdir
map to touch
map xx !$f
map ax mkexec
map dr drag
map dR drag-separate

map ex extract
map zz zstd
map zZ zstd-each
map zr zstd-repack
map Zz zip
map ZZ zip-each
map Zr zip-repack
map mm archive-mount
map mM archive-mount-password
map uu archive-unmount
map du sized0
map dU sized1
map ds dust
map dn ncdu

map <c-f> finder
map <c-n> bookmarks
map ba bookmark-add
map br bookmark-rm

map rl img-rot-cw
map rh img-rot-ccw
map ar img-autorot
map gi gimp

map <c-r> reload
map <c-e> down
map <c-y> up

map at argtest
map <enter> shell-wait

# renaming
map A  rename # at the very end
map cw push A<c-u> # new rename
map I  push A<c-a> # at the very beginning
map cW bulkrename

# avoid unknown mapping error when pressing esc or tab.
map <esc> :echo
map <tab> :echo

# ==================
# = Remove Bindings
# ==================

map r
map y
map d
map p
map v
map u
map c
map e
map i
map w
map t
map m
map f
map F
map "'"
map '"'
